{"version":3,"sources":["Templates.js","Meme.js","App.js","index.js"],"names":["App","templates","setMeme","className","map","template","onClick","style","background","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","value","i","onChange","e","newBoxes","text","target","box","console","log","fetch","then","res","json","data","setTemplates","useEffect","response","memes","Templates","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAwBeA,MArBf,YAAoC,IAAtBC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,QACvB,OACE,qBAAKC,UAAU,YAAf,SAEIF,EAAUG,KAAI,SAACC,GACb,OAAO,qBAELF,UAAW,WACXG,QAAS,kBAAIJ,EAAQG,IAHhB,SAKL,qBACEE,MAAO,CAACC,WAAW,QAAD,OAAUH,EAASI,IAAnB,OAClBN,UAAU,WANPE,EAASK,U,cCyCXC,MA/Cf,YAAgC,IAAjBC,EAAgB,EAAhBA,KAAMV,EAAU,EAAVA,QACnB,EAAwBW,mBAAS,CAC/BC,YAAaF,EAAKF,GAClBK,SAAU,SACVC,SAAU,kBACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAqBA,OACE,sBAAKhB,UAAU,OAAf,UACE,qBAAKiB,IAAG,UAAKR,EAAKH,KAAOY,IAAI,KAAI,uBAE/B,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAOC,GAAR,OAC7B,uBAEEC,SACE,SAACC,GACC,IAAMC,EAAWV,EAAKD,MACtBW,EAASH,GAAK,CACZI,KAAMF,EAAEG,OAAON,OAEjBL,EAAQ,2BAAID,GAAL,IAAWD,MAAOW,OAPxBH,MAYX,uBACA,wBAAQnB,QAjCS,WACnB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC2B,EAAKN,GACnBhB,GAAG,iBAAcgB,EAAd,oBAA2BM,EAAIF,SAEpCG,QAAQC,IAAIxB,GACZyB,MAAMzB,GACH0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,QAAQC,IAAIK,GACZpC,EAAQ,2BAAIU,GAAL,IAAWH,IAAK6B,EAAKA,KAAK7B,WAuBnC,sBACA,wBAAQH,QAAS,kBAAMJ,EAAQ,OAA/B,iCCpBSF,MApBf,WACE,MAAkCa,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBsC,EAAlB,KACA,EAAwB1B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPAsC,qBAAU,WACRN,MAAM,qCACHC,MAAK,SAAAM,GAAQ,OAAIA,EAASJ,UAC1BF,MAAK,SAACE,GACLE,EAAaF,EAAKC,KAAKI,YAE1B,IAED,sBAAKvC,UAAU,MAAf,UACE,gDAEY,OAATS,EAAgB,cAAC+B,EAAD,CAAW1C,UAAWA,EAAWC,QAASA,IAAa,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCd3G0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.c4d763e7.chunk.js","sourcesContent":["import './App.css';\nimport {useState, useEffect} from \"react\";\n\nfunction App({templates, setMeme}) {\n  return (\n    <div className=\"templates\">\n      {\n        templates.map((template)=>{\n          return <div\n            key={template.id}\n            className={\"template\"}\n            onClick={()=>setMeme(template)}\n          >\n            <div\n              style={{background: `url(\"${template.url}\")`}}\n              className='image'\n            />\n          </div>\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","\"use strict\"\nimport React, {useState} from 'react';\n\nfunction Meme({meme, setMeme}) {\n  const [form, setForm] = useState({\n    template_id: meme.id,\n    username: \"teasty\",\n    password: \"PPS$Asr52ttCfaF\",\n    boxes: []\n  })\n\n  const generateMeme = () => {\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\n    form.boxes.map((box, i) =>{\n      url += `&boxes[${i}][text]]=${box.text}`;\n    })\n    console.log(url)\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        setMeme({...meme, url: data.data.url})\n      })\n  }\n\n  return (\n    <div className=\"meme\">\n      <img src={`${meme.url}`} alt=\"\"/><br/>\n      {\n        [...Array(meme.box_count)].map((value, i) =>\n          <input\n            key={i}\n            onChange = {\n              (e) => {\n                const newBoxes = form.boxes;\n                newBoxes[i] = {\n                  text: e.target.value\n                }\n                setForm({...form, boxes: newBoxes})\n              }\n            }\n          />)\n      }\n      <br/>\n      <button onClick={generateMeme}>Generate</button>\n      <button onClick={() => setMeme(null)}>Choose Template</button>\n    </div>\n  );\n}\n\nexport default Meme;","import './App.css';\nimport {useState, useEffect} from \"react\";\nimport Templates from \"./Templates\";\nimport Meme from \"./Meme\";\n\nfunction App() {\n  const [templates, setTemplates] = useState([])\n  const [meme, setMeme] = useState(null)\n  useEffect(()=>{\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then((json)=>{\n        setTemplates(json.data.memes)\n      })\n  }, [])\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {\n        (meme === null)? <Templates templates={templates} setMeme={setMeme}/> : <Meme meme={meme} setMeme={setMeme}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}